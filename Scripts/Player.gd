extends KinematicBody2D

export var move_acc : float = 9.0
export var move_speed : float = 45.0
export var fric_factor : float = 0.25
export var jump_force : float = 100
export var gravity : float = 5

export var continous_room : bool = true
export var limit_x : bool = true
export var limit_right : int = 100000
export var left_y : int = -1
export var right_y : int = -1
export var checkpoint : Vector2 = Vector2()
var view_start : int
var view_end : int

export var jumps : int = 2
var jumps_left : int = jumps
var remember_jump_timer : float = 0.2
var jump_was_pressed : bool = false
var coyote_timer : float = 0.35
var coyote_can_jump : bool = false
var coyote_active : bool = false
var is_shroom_jumping : bool = false

var velocity := Vector2()

var half_size : int = 0
var is_checkpointing : bool = false

onready var dust_particles = load("res://Scenes/Particles/DustParticles.tscn")
var can_emit : bool = true

var animation_threshhold : float = 20.0

func _ready() -> void:
	Pause.pausable = true
	half_size = 5/2
	
	$Camera2D.limit_right = limit_right
	if !limit_x:
		$Camera2D.limit_left = -1000


func _process(_delta : float) -> void:
	var shader_pos = get_global_transform_with_canvas().origin
	shader_pos.x = clamp(shader_pos.x, 0, get_viewport_rect().size.x) / get_viewport_rect().size.x
	shader_pos.y = 1-clamp(shader_pos.y, 0, get_viewport_rect().size.y) / get_viewport_rect().size.y
	
	$CanvasLayer/ColorRect.get_material().set_shader_param("center", shader_pos)
	shader_pos.y = 1-shader_pos.y
	$CanvasLayer2/ColorRect.get_material().set_shader_param("target", shader_pos)
	
	view_start = $Camera2D.get_camera_screen_center().x - 80 - half_size
	view_end = $Camera2D.get_camera_screen_center().x + 80 + half_size
	
	Global.view_start.x = view_start
	Global.view_end.x = view_end
	
	if continous_room and !is_checkpointing:
		if global_position.x < view_start:
			global_position.x = view_end
			if right_y > 0:
				global_position.y = right_y
		elif global_position.x > view_end:
			global_position.x = view_start
			if left_y > 0:
				global_position.y = left_y
	
	if global_position.y > $Camera2D.get_camera_screen_center().y + 60:
		SceneTransition.start(self, "goto_checkpoint")
		#goto_checkpoint()

func _physics_process(_delta) -> void:
	
	if Input.is_action_pressed("move_right"):
		if velocity.x + move_acc <= move_speed:
			velocity.x += move_acc
		$AnimatedSprite.play("Run")
		$AnimatedSprite.flip_h = false
	elif Input.is_action_pressed("move_left"):
		if velocity.x - move_acc >= -move_speed:
			velocity.x -= move_acc
		$AnimatedSprite.play("Run")
		$AnimatedSprite.flip_h = true
	else: 
		velocity.x *= fric_factor
		$AnimatedSprite.play("Idle")
	
	if !is_on_floor() or is_shroom_jumping:
		velocity.y += gravity
		if !coyote_active:
			coyote_timer()
	else:
		jumps_left = jumps
		coyote_can_jump = true
		if jump_was_pressed:
			jump()
	
	if Input.is_action_just_pressed("jump"):
		jump_was_pressed = true
		remember_jump_time()
		jump()
	if Input.is_action_just_pressed("restart"):
		SceneTransition.start(self, "goto_checkpoint")
	
	velocity = move_and_slide(velocity, Vector2.UP)
	
	for i in get_slide_count():
		var collision = get_slide_collision(i)
		match collision.collider.collision_layer:
			2:
				if is_on_floor() and abs(velocity.x) > move_acc:
					emit_dust()
			8:
				if (collision.normal-Vector2.UP).length() < 0.5:
					shroom_jump()
					collision.collider.get_node("Sound").play()
	
	if velocity.y > animation_threshhold:
		$AnimatedSprite.play("Fall")
	elif velocity.y < -animation_threshhold:
		$AnimatedSprite.play("Jump")
	

func coyote_timer() -> void:
	coyote_active = true
	yield(get_tree().create_timer(coyote_timer), "timeout")
	coyote_can_jump = false
	coyote_active = false

func remember_jump_time() -> void:
	yield(get_tree().create_timer(remember_jump_timer), "timeout")
	jump_was_pressed = false

func jump() -> void:
	if jumps_left > 0 and !is_shroom_jumping:
		if jumps_left == jumps and !is_on_floor():
			if !coyote_can_jump:
				jumps_left -= 1
		jumps_left -= 1
		if velocity.y > -jump_force:
			velocity.y = -jump_force
		else:
			velocity.y -= jump_force
			
func goto_checkpoint() -> void:
	var pre_checkpoint = $Camera2D.current
	is_checkpointing = true
	if view_start < checkpoint.x and checkpoint.x < view_end:
		global_position = checkpoint
	else:
		$Camera2D.current = true
		global_position = checkpoint
		yield(get_tree().create_timer(0.5), "timeout")
		$Camera2D.current = pre_checkpoint
	is_checkpointing = false

func set_checkpoint(new_checkpoint : Vector2) -> void:
	checkpoint = new_checkpoint

func shroom_jump() -> void:
	jumps_left = jumps - 1
	velocity.y = -jump_force*1.6
	is_shroom_jumping = true
	yield(get_tree().create_timer(0.2), "timeout")
	is_shroom_jumping = false

func emit_dust() -> void:
	if can_emit:
		var p = dust_particles.instance()
		add_child(p)
		p.global_position = Vector2(global_position.x, global_position.y + 4)
		can_emit = false
		yield(get_tree().create_timer(0.1), "timeout")
		can_emit = true



func _on_Area2D_body_entered(body):
	if body == self:
		Global.target_scene = "res://Scenes/Menus/Levels2.tscn"
		SceneTransition.start(Global, "scene")
